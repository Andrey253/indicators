—оздадим новую ветку. 
git branch. показывает список веток, с которыми мы работаем в проекте, и выдел€ет текущую.
≈сли мы находимс€ в master создаЄм новую ветку: git checkout -b им€-новой-ветки.

≈сли текуща€ ветка не master, сначала переключимс€ в основную ветку: git checkout master.
ћы делаем это, чтобы нова€ ветка содержала свежую, на момент создани€, рабочую версию проекта.

Ёта команда позвол€ет переключатьс€ между существующими ветками в проекте, после git checkout надо указать название нужной ветки.


≈сли вы допустили опечатку, вы можете изменить название ветки с помощью команды: git branch -m старое-им€-ветки новое-им€-ветки.

ѕосле того как вы создали ветку, поработали в ней у себ€ локально

≈сли вы хотите сохранить изменени€ не во всех файлах, дл€ начала можно ввести команду git status. ¬оспользуйтесь командой git add им€-файла. 

≈сли вы хотите сохранить все изменени€ разом, вводите git add -A.

“еперь мы можем сделать коммит,git commit -m "ваше сообщение". 

введите команду git push origin название-текущей-ветки, где origin означает репозиторий, который был склонирован на компьютер, то есть ваш форк.

 
¬ локальном репозитории вводим команду git checkout master, переходим в master.
“еперь забираем (подт€гиваем) изменени€ из ветки master мастер-репозитори€ git pull academy master.
Academy здесь Ч название мастер-репозитори€,

≈сли консоль выдаЄт ошибку и говорит, что не знает директории с таким именем, нужно добавить ссылку на этот репозиторий:
git remote add academy git@github.com:your-repo.git
¬место academy указывайте своЄ название и оно закрепитс€ за этим репозиторием.

“еперь отправьте изменени€ уже из своей ветки master в ваш форк на GitHub с помощью команды git push origin master.
